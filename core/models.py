import re
from django.db import models
from django.utils.text import slugify
from django.contrib.auth.models import User


# TOPIC #
class Topic(models.Model):
    title = models.CharField(max_length=200)

    def __str__(self):
        return self.title

    def get_topic_posts_count(self):
        return self.topic_posts.count()


# POST #
class Post(models.Model):
    title = models.CharField(max_length=200)
    slug = models.SlugField(
        max_length=200, unique=True, blank=True
    )  # May be empty - it's automatically generated by our custom save method
    author = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="forum_posts"
    )
    topic = models.ForeignKey(
        Topic, on_delete=models.SET_NULL, null=True, related_name="topic_posts"
    )
    content = models.TextField()
    created_on = models.DateTimeField(auto_now_add=True)
    likes = models.ManyToManyField(
        User, related_name="liked_posts", blank=True
    )

    # Automated slug generation with prevention of duplicate slugs
    def save(self, *args, **kwargs):
        if not self.slug:
            slug = slugify(self.title)

            # Remove any characters that are
            # not alphanumeric, hyphens, or underscores
            slug = re.sub(r"[^a-zA-Z0-9_-]", "-", slug)
            unique_slug = slug
            num = 1
            while Post.objects.filter(slug=unique_slug).exists():
                unique_slug = f"{slug}-{num}"
                num += 1
            self.slug = unique_slug
        super(Post, self).save(*args, **kwargs)

    def total_likes(self):
        return self.likes.count()

    def __str__(self):
        return self.title


# REPLY #
class Reply(models.Model):
    author = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="user_replies"
    )
    related_post = models.ForeignKey(
        Post, on_delete=models.CASCADE, related_name="post_replies"
    )
    content = models.TextField()
    created_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f'"{self.related_post}" - reply from: {self.author}'


# USER PROFILE #
class UserProfile(models.Model):
    user = models.OneToOneField(
        User, on_delete=models.CASCADE, primary_key=True
    )
    bio = models.TextField(blank=True)
    location = models.CharField(max_length=100, blank=True)

    def __str__(self):
        return f"Profile of {self.user.username}"
